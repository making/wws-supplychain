apiVersion: carto.run/v1alpha1
kind: ClusterImageTemplate
metadata:
  name: wws-image-template
spec:
  params:
  - name: serviceAccount
    default: default
  - name: registry
    default: { }

  imagePath: .status.taskResults[?(@.name=="image_ref")].value

  lifecycle: tekton

  ytt: |
    #@ load("@ytt:data", "data")

    #@ def merge_labels(fixed_values):
    #@   labels = {}
    #@   if hasattr(data.values.workload.metadata, "labels"):
    #@     labels.update(data.values.workload.metadata.labels)
    #@   end
    #@   labels.update(fixed_values)
    #@   return labels
    #@ end

    #@ def image():
    #@   return "/".join([
    #@    data.values.params.registry.server,
    #@    data.values.params.registry.repository,
    #@    "-".join([
    #@      data.values.workload.metadata.name,
    #@      data.values.workload.metadata.namespace,
    #@    ])
    #@   ])
    #@ end

    ---
    apiVersion: tekton.dev/v1beta1
    kind: TaskRun
    metadata:
      generateName: #@ data.values.workload.metadata.name + "-build-"
      labels: #@ merge_labels({ "app.kubernetes.io/component": "build" })
    spec:
      serviceAccountName: #@ data.values.params.serviceAccount
      taskRef:
        resolver: cluster
        params:
        - name: kind
          value: task
        - name: namespace
          value: wasm-tasks
        - name: name
          value: wws-build
      params:
        - name: image
          value: #@ image()
        - name: source_tar
          value: #@ data.values.source.url
        #@ if hasattr(data.values.workload.spec.source, "subPath"):
        - name: sub_path
          value: #@ data.values.workload.spec.source.subPath
        #@ end